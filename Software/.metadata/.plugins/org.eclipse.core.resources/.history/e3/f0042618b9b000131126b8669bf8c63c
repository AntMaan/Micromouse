/*
 * sysem.c
 *
 *  Created on: Mar 18, 2014
 *      Author: Anthony Merlino and Brad Ebinger
 */
#include <stdint.h>
#include <stdbool.h>
#include <ti/drivers/GPIO.h>
#include <driverlib/sysctl.h>

#include "system.h"
#include "drivers/motor.h"
#include "drivers/ir_sensor.h"

/* Callback functions for the GPIO interrupt example. */
Void gpioButtonFxn0(Void);
Void gpioButtonFxn1(Void);

/* GPIO configuration structure */
const GPIO_HWAttrs gpioHWAttrs[MICROMOUSE_GPIO_COUNT] = {
	{GPIO_PORTA_BASE, GPIO_PIN_3, GPIO_OUTPUT}, /* LEFT_MOTOR_DIR_1 */
    {GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_OUTPUT}, /* LEFT_MOTOR_DIR_2 */
    {GPIO_PORTA_BASE, GPIO_PIN_5, GPIO_OUTPUT}, /* RIGHT_MOTOR_DIR_1 */
    {GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_OUTPUT}, /* RIGHT_MOTOR_DIR_2 */
    {GPIO_PORTA_BASE, GPIO_PIN_4, GPIO_OUTPUT}, /* STBY_MOTOR */
    {GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_OUTPUT}, /* IR_SIDE_1 */
	{GPIO_PORTD_BASE, GPIO_PIN_4, GPIO_OUTPUT}, /* IR_SIDE_2 */
	{GPIO_PORTB_BASE, GPIO_PIN_7, GPIO_OUTPUT}, /* IR_DIAG_LEFT */
	{GPIO_PORTD_BASE, GPIO_PIN_5, GPIO_OUTPUT}, /* IR_DIAG_RIGHT */
	{GPIO_PORTB_BASE, GPIO_PIN_6, GPIO_OUTPUT}, /* IR_FRONT_LEFT */
	{GPIO_PORTD_BASE, GPIO_PIN_6, GPIO_OUTPUT}, /* IR_FRONT_RIGHT */
};

/* Memory for the GPIO module to construct a Hwi */
//Hwi_Struct callbackHwi;

/* GPIO callback structure to set callbacks for GPIO interrupts */
//const GPIO_Callbacks EK_TM4C123GXL_gpioPortFCallbacks = {
//    GPIO_PORTF_BASE, INT_GPIOF, &callbackHwi,
//    {gpioButtonFxn1, NULL, NULL, NULL, gpioButtonFxn0, NULL, NULL, NULL}
//};

const GPIO_Config GPIO_config[] = {
    {&gpioHWAttrs[0]},
    {&gpioHWAttrs[1]},
    {&gpioHWAttrs[2]},
    {&gpioHWAttrs[3]},
    {&gpioHWAttrs[4]},
    {&gpioHWAttrs[5]},
    {&gpioHWAttrs[6]},
    {&gpioHWAttrs[7]},
    {&gpioHWAttrs[8]},
    {&gpioHWAttrs[9]},
    {&gpioHWAttrs[10]},
    {NULL},
};

/* UART objects */
UARTTiva_Object uartTivaObjects[MICROMOUSE_UARTCOUNT];

/* UART configuration structure */
const UARTTiva_HWAttrs uartTivaHWAttrs[MICROMOUSE_UARTCOUNT] = {
    {UART0_BASE, INT_UART0}, /* MICROMOUSEL_UART0 */
    {UART3_BASE, INT_UART3},  /* DEBUG - UART3 */
    {UART4_BASE, INT_UART4}  /* BLUETOOTH - UART4 */
};

const UART_Config UART_config[] = {
    { // UART0
        &UARTTiva_fxnTable,
        &uartTivaObjects[0],
        &uartTivaHWAttrs[0]
    },
    { // UART3
	&UARTTiva_fxnTable,
	&uartTivaObjects[1],
	&uartTivaHWAttrs[1]
    },
    {NULL, NULL, NULL}
};

/*
 *  ======== EK_TM4C123GXL_initUART ========
 */
Void EK_TM4C123GXL_initUART()
{
    /* Enable and configure the peripherals used by the uart. */
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART3);
	GPIOPinConfigure(GPIO_PC6_U3RX);
	GPIOPinConfigure(GPIO_PC7_U3TX);
	GPIOPinTypeUART(GPIO_PORTC_BASE, GPIO_PIN_6 | GPIO_PIN_7);

    /* Initialize the UART driver */
    UART_init();
}

void system_init(){

	/**
	 * Allow access to all GPIO port registers
	 */
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

#ifdef MOTORS_ENABLE
    motors_init();
#endif

#ifdef IR_ADC_SENSORS_ENABLE
    ir_sensor_init();
#endif

    GPIO_init();

}
